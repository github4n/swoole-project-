<?php

namespace Site\Websocket\Account\Staff;

use Lib\Websocket\Context;
use Lib\Config;
use Site\Websocket\CheckLogin;

/*
 * 接收修改的子账号的信息
 * Account/Staff/StaffUpdate {"staff_id":302,"staff_name":"孙悟空","staff_key":"sun123","limit_point":"1","level_list":["9","3","5"],"deposit_limit":606666,"withdraw_limit":8888888,"operate_list":["staff_list_minor_select"]}
 * */

class StaffUpdate extends CheckLogin {

    public function onReceiveLogined(Context $context, Config $config) {
        //验证是否有操作权限
        $auth = json_decode($context->getInfo('StaffAuth'));
        if (!in_array("slave_list_update", $auth)) {
            $context->reply(["status" => 202, "msg" => "你还没有操作权限"]);
            return;
        }
        $staffId = $context->getInfo('StaffId');
        $StaffGrade = $context->getInfo("StaffGrade");
        $data = $context->getData();
        $staff_id = $data['staff_id'];
        $staff_name = $data["staff_name"];
        $staff_key = $data["staff_key"];
        $staff_password = $data["staff_password"];
        $level_list = $data["level_list"];
        $notify_status = $data["notify_status"];
        $deposit_limit = $data["deposit_limit"] ?: 0;
        $withdraw_limit = $data["withdraw_limit"] ?: 0;
        $operate_keys = $data["operate_list"];
        $info = array();
        $operate_list = array();
        //基本判断
        if (!is_numeric($staff_id)) {
            $context->reply(["status" => 202, "msg" => "账号参数类型错误"]);
            return;
        }
        if (empty($staff_name)) {
            $context->reply(["status" => 203, "msg" => "员工名称不能为空"]);
            return;
        }
        if (empty($staff_key)) {
            $context->reply(["status" => 204, "msg" => "登录名称不能为空"]);
            return;
        }
        if (!empty($staff_password)) {
            //判断密码规则
            $preg = '/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,40}$/';
            if (!preg_match($preg, $staff_password)) {
                $context->reply(['status' => 206, 'msg' => '密码只能由数字字母组成，长度有效区间：[6-40]']);
                return;
            }
        }
        if (!empty($deposit_limit)) {
            if (!is_numeric($deposit_limit)) {
                $context->reply(["status" => 208, "msg" => "入款金额类型不正确"]);
                return;
            }
        }
        if (!empty($withdraw_limit)) {
            if (!is_numeric($withdraw_limit)) {
                $context->reply(["status" => 209, "msg" => "出款金额类型不正确"]);
                return;
            }
        }
        if (empty($level_list)) {
            $context->reply(["status" => 210, "msg" => "会员等级列表不能为空"]);
            return;
        }
        if (empty($operate_keys)) {
            $context->reply(["status" => 211, "msg" => "子账号操作权限不能为空"]);
            return;
        }
        if ($notify_status == 1) {
            $notify_status = 1;
        } else {
            $notify_status = 0;
        }
        //判断修改的登录名称是否已经存在
        $sql = "SELECT staff_key FROM staff_auth WHERE staff_key=:staff_key AND staff_id!=:staff_id";
        $param = [":staff_key" => $staff_key, ":staff_id" => $staff_id];
        $mysql = $config->data_staff;
        try {
            foreach ($mysql->query($sql, $param) as $row) {
                $info = $row;
            }
        } catch (\PDOException $e) {
            $context->reply(["status" => 400, "msg" => "添加失败"]);
            throw new \PDOException($e);
        }
        if (!empty($info)) {
            $context->reply(["status" => 207, "msg" => "登录名称已经存在"]);
            return;
        }
        //修改员工的基本信息
        $sql = "UPDATE staff_info SET staff_name=:staff_name WHERE staff_id=:staff_id";
        $param = [":staff_id" => $staff_id, ":staff_name" => $staff_name];
        try {
            $affectedRow = $mysql->execute($sql, $param);
            if ($affectedRow > 0) {
                //记录日志
                $sql = 'INSERT INTO operate_log SET staff_id=:staff_id, operate_key=:operate_key, detail=:detail,client_ip= :client_ip';
                $params = [
                    ':staff_id' => $staffId,
                    ':client_ip' => ip2long($context->getClientAddr()),
                    ':operate_key' => 'slave_list_update',
                    ':detail' => '修改子账号编号为' . $staff_id . '的基本信息',
                ];
                $mysql->execute($sql, $params);
            }
        } catch (\PDOException $e) {
            $context->reply(["status" => 400, "msg" => "修改失败"]);
            throw new \PDOException($e);
        }
        //修改员工的登录信息
        if (empty($staff_password)) {
            $sql = "UPDATE staff_auth SET staff_key=:staff_key WHERE staff_id=:staff_id";
            $param = [":staff_key" => $staff_key, "staff_id" => $staff_id];
        }
        if (!empty($staff_password)) {
            $sql = "UPDATE staff_auth SET staff_key=:staff_key,password_hash=:password_hash WHERE staff_id=:staff_id";
            $param = [":staff_key" => $staff_key, "staff_id" => $staff_id, ":password_hash" => $staff_password];
        }
        try {
            $affectedRow = $mysql->execute($sql, $param);
            if ($affectedRow > 0) {
                //记录日志
                $sql = 'INSERT INTO operate_log SET staff_id=:staff_id, operate_key=:operate_key, detail=:detail,client_ip= :client_ip';
                $params = [
                    ':staff_id' => $staffId,
                    ':client_ip' => ip2long($context->getClientAddr()),
                    ':operate_key' => 'slave_list_update',
                    ':detail' => '修改子账号编号为' . $staff_id . '的登录信息',
                ];
                $mysql->execute($sql, $params);
            }
        } catch (\PDOException $e) {
            $context->reply(["status" => 401, "msg" => "修改失败"]);
            throw new \PDOException($e);
        }
        //修改会员层级的(删除之前的层级)
        $sql = "DELETE FROM staff_layer WHERE staff_id=:staff_id";
        $param = [":staff_id" => $staff_id];
        try {
            $mysql->execute($sql, $param);
        } catch (\PDOException $e) {
            $context->reply(["status" => 402, "msg" => "修改失败"]);
            throw new \PDOException($e);
        }
        //添加新的层级
        if (!empty($level_list)) {
            foreach ($level_list as $item) {
                $sql = "INSERT INTO staff_layer SET staff_id=:staff_id,layer_id=:layer_id";
                $param = [":staff_id" => $staff_id, ":layer_id" => $item];
                try {
                    $mysql->execute($sql, $param);
                } catch (\PDOException $e) {
                    $context->reply(["status" => 403, "msg" => "添加失败"]);
                    throw new \PDOException($e);
                }
            }
            //记录日志
            $sql = 'INSERT INTO operate_log SET staff_id=:staff_id, operate_key=:operate_key, detail=:detail,client_ip= :client_ip';
            $params = [
                ':staff_id' => $staffId,
                ':client_ip' => ip2long($context->getClientAddr()),
                ':operate_key' => 'slave_list_update',
                ':detail' => '添加子账号编号为' . $staff_id . '添加会员层级id为' . json_encode($level_list),
            ];
            $mysql->execute($sql, $params);
        }
        //修改员工授信额度
        $sqls = "UPDATE staff_credit SET deposit_limit=:deposit_limit, withdraw_limit=:withdraw_limit,notify_status=:notify_status WHERE staff_id=:staff_id";
        $params = [
            ":staff_id" => $staff_id,
            ":deposit_limit" => $deposit_limit,
            ":withdraw_limit" => $withdraw_limit,
            ":notify_status" => $notify_status,
        ];

        try {
            $mysql->execute($sqls, $params);
            //记录日志
            $sql = 'INSERT INTO operate_log SET staff_id=:staff_id, operate_key=:operate_key, detail=:detail,client_ip= :client_ip';
            $params = [
                ':staff_id' => $staffId,
                ':client_ip' => ip2long($context->getClientAddr()),
                ':operate_key' => 'slave_list_update',
                ':detail' => '添加子账号编号为' . $staff_id . "出款额度为" . $withdraw_limit . "入款额度为" . $deposit_limit,
            ];
            $mysql->execute($sql, $params);
        } catch (\PDOException $e) {
            $context->reply(["status" => 400, "msg" => "添加失败"]);
            throw new \PDOException($e);
        }
        //删除之前的员工操作的信息
        $sqls = "DELETE FROM staff_permit WHERE staff_id=:staff_id";
        $param = [":staff_id" => $staff_id];
        try {
            $mysql->execute($sqls, $param);
        } catch (\PDOException $e) {
            $context->reply(["status" => 400, "msg" => "修改失败"]);
            throw new \PDOException($e);
        }
        $operate_sql = "select operate_key  from  operate  ";
        $operate_data = iterator_to_array($mysql->query($operate_sql));
        $operates = [];
        if (!empty($operate_data)) {
            foreach ($operate_data as $operate_detail) {
                $operates[] = $operate_detail['operate_key'];
            }
        }

        //添加员工的操作授权信息
        foreach ($operate_keys as $item) {
            if (!in_array($item, $operates)) {
                $context->reply(["status" => 212, "msg" => "子账号操作权限错误"]);
                return;
            }
            $sql = "INSERT INTO staff_permit SET staff_id=:staff_id, operate_key=:operate_key";
            $param = [":staff_id" => $staff_id, ":operate_key" => $item];
            try {
                $mysql->execute($sql, $param);
            } catch (\PDOException $e) {
                $context->reply(["status" => 400, "msg" => "添加失败"]);
                throw new \PDOException($e);
            }
            //记录日志
            $sql = 'INSERT INTO operate_log SET staff_id=:staff_id, operate_key=:operate_key, detail=:detail,client_ip= :client_ip';
            $params = [
                ':staff_id' => $staffId,
                ':client_ip' => ip2long($context->getClientAddr()),
                ':operate_key' => 'slave_list_update',
                ':detail' => '添加子账号编号为' . $staff_id . '操作授权信息',
            ];
            $mysql->execute($sql, $params);
        }
        $context->reply([
            "status" => 200,
            "msg" => "修改成功",
        ]);
    }

}
