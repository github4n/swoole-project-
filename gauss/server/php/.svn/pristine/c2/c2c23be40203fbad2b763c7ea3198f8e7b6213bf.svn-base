<?php
/**
 * Created by PhpStorm.
 * User: nathan
 * Date: 19-3-5
 * Time: 下午7:02
 */

namespace App\Websocket\ExternalGame\FG;
class FgApi {
    private static $url = "https://api.ppro.98078.net/v2/";
    private static $header = ['Accept:application/json','merchantname:uat_gongying1214','merchantcode:196f947f9c00ee8e20af23cc0d5b5926'];
    /************************************** Game ****************************************** /
    /*
     * APP大厅下载二维码获取
     */
    function app_download() {
        $real_url = self::$url.'app/download/';
        $res = $this->http_curl($real_url, self::$header, 'GET');
        return $res;
    }

    /*
     * 启动游戏
     * openid       [必填]String  Players unique ID
     * game_code    [必填]String  Gamecode
     * game_type    [必填]String  as or h5
     * language     [必填]String  zh_CN or en
     * ip           [必填]String  Players client ip
     * return_url   [必填]String  Agent lobby url.
    */
    function launch_game($openid, $game_code, $game_type, $language, $ip, $return_url) {
        $data_arr['openid'] = $openid;
        $data_arr['game_code'] = $game_code;
        $data_arr['game_type'] = $game_type;
        $data_arr['language'] = $language;
        $data_arr['ip'] = $ip;
        $data_arr['return_url'] = $return_url;
        $real_url = self::$url . 'launch_game';
        return $this->http_curl($real_url, self::$header, 'GET', $data_arr);
    }

    /*
     * 启动试玩游戏
     * game_code    [必填]String  Gamecode
     * game_type    [必填]String  as or h5
     * language     [必填]String  zh_CN or en
     * ip           [必填]String  Players client ip
     * return_url   [必填]String  Agent lobby url.
    */
    function launch_free_game($game_code, $game_type, $language, $ip, $return_url) {
        $data_arr['game_code'] = $game_code;
        $data_arr['game_type'] = $game_type;
        $data_arr['language'] = $language;
        $data_arr['ip'] = $ip;
        $data_arr['return_url'] = $return_url;
        $real_url = self::$url.'launch_free_game';
        return $this->http_curl($real_url, self::$header, 'POST', $data_arr);
    }

    /*
     * 获取游戏列表
     * terminal     [必填]String  as or h5
     * lang         [必填]String  zh_CN or en
    */
    function get_game_list($terminal, $lang) {
        $real_url = self::$url.'games/game_type/'.$terminal.'/language/'.$lang;
        return $this->http_curl($real_url, self::$header, 'GET');
    }

    /************************************************************************************** /

    /********************************** Log/游戏记录 ************************************** /

    /*
     * 分页采集数据
     * 第一次采集可以使用 : agent_log_by_page($gt)
     * 第二次根据第一次返回的page_key使用: agent_log_by_page($gt, $page_key)
     * 如果中间page_key丢失了,请使用上一次最新的数据id: agent_log_by_page($gt, $page_key,$id)
     * 如果已经拿到的数据是最新的那么page_key会返回none; id不存在page_key也返回none
     * gt           [必填]String    fish/poker/slot/fruit.
     * id           [非必填]String  the response field of game log.
     * page_key     [非必填]String  Page key for game log.
     * start_time   [非必填]Number  unix时间戳整数 长度 10.
     * end_time     [非必填]Number  unix时间戳整数 长度 10.
     */
    function get_log_page($gt, $id = null, $page_key = null, $start_time = null, $end_time = null) {
        $action = 'agent/log_by_page/gt/'.$gt;
        if($id){
            $action = $action.'/id/'.$id;
        }
        if($page_key){
            $action = $action.'/page_key/'.$page_key;
        }
        if($start_time && $end_time){
            $action = $action.'/start_time/'.$start_time.'/end_time/'.$end_time;
        }
        $real_url = self::$url.$action;
        return $this->http_curl($real_url, self::$header, 'GET');
    }

    /*
     * 获取指定起始时间范围内玩家下注记录的id列表
     * start_time和end_time 是unix时间戳 两个时间间隔不能超过2天
     * gt           [非必填]String  fish/rp/slot,default fish.
     * start_time   [必填]Number    unix时间戳整数 长度 10.
     * end_time     [必填]Number    unix时间戳整数 长度 10.
    */
    function get_log_ids($gt = '', $start_time, $end_time) {
        $real_url = self::$url.'agent_game_log_by_time/start_time/'.$start_time.'/end_time/'.$end_time.'/gt/'.$gt;
        return $this->http_curl($real_url, self::$header, 'GET');
    }

    /*
     * 获取指定起始时间范围内游戏记录数
     * gt           [非必填]String  fish/poker/slot/fruit.
     * start_time   [必填]Number    unix时间戳整数 长度 10.
     * end_time     [必填]Number    unix时间戳整数 长度 10.
    */
    function get_log_counts($gt = 'fish', $start_time, $end_time) {
        $real_url = self::$url .'agent/log_by_count/gt/'.$gt.'/start_time/'.$start_time.'/end_time/'.$end_time;
        return $this->http_curl($real_url, self::$header, 'GET');
    }

    /*
     * 获取指定起始时间范围内游戏记录详细数据
     * gt           [非必填]String  fish/poker/slot/fruit.
     * start_time   [必填]Number    unix时间戳整数 长度 10.
     * end_time     [必填]Number    unix时间戳整数 长度 10.
    *  size         [必填]Number    取值范围:1 - 3000
    */
    function get_log_datas($gt = 'fish', $start_time, $end_time, $size) {
        $real_url = self::$url.'agent/log_by_time/gt/'.$gt.'/start_time/'.$start_time.'/end_time/'.$end_time.'/size/'.$size;
        return $this->http_curl($real_url, self::$header, 'GET');
    }

    /*
     * 通过局id获取该局游戏记录详细数据
     * gt           [必填]String    rp, only support rp..
     * id           [必填]Number    取值范围:1 - 3000
    */
    function get_log_detail($gt = 'rp', $id ) {
        $real_url = self::$url.'agent_game_detail_by_id/id/'.$id.'/gt/'.$gt;
        return $this->http_curl($real_url, self::$header, 'GET');
    }

    /************************************* Player ***************************************** /
    /*
     * 重置玩家密码
     * user_name    [必填]String    username of the player
     * password     [必填]Number    new password.
     */
    function reset_player_password($user_name, $password ) {
        $data_arr['password'] = $password;
        $real_url = self::$url.'player_pwds/'.$user_name;
        return $this->http_curl($real_url, self::$header, 'PUT', $data_arr);
    }

    /*
     * 创建新玩家
     * member_code  [必填]String    Username of the Player 取值范围: 5,32.
     * password     [必填]String    Password of the Player 取值范围: 5,40.
    */
    function create_new_player($member_code, $password ) {
        $data_arr['member_code'] = $member_code;
        $data_arr['password'] = $password;
        $real_url = self::$url.'players/';
        return $this->http_curl($real_url, self::$header, 'PUT', $data_arr);
    }

    /*
     * 删除玩家会话
     * openid  [必填]String    player unique ID
    */
    function delete_player_session($openid) {
        $real_url = self::$url.'player_sessions/'.$openid;
        return $this->http_curl($real_url, self::$header, 'DELETE');
    }

    /*
     * 存取玩家筹码
     * openid  [必填]String    Players unique ID.
     * amount  [必填]Number    Transfer negative or positive money using cents to descript
     * externaltransactionid   [必填]String    Transaction OrderID
    */
    function save_player_uchips($openid, $amount, $externaltransactionid ) {
        $real_url = self::$url.'player_uchips/'.$openid;
        $data['amount'] = $amount;
        $data['externaltransactionid'] = $externaltransactionid;
        return $this->http_curl($real_url, self::$header, 'PUT', $data);
    }

    /*
     * 捕猎排行派彩
     * game_id  [必填]Number   游戏记录id.
    */
    function player_fish_top($game_id) {
        $real_url = self::$url.'fish/player_rank/game_id/'.$game_id;
        return $this->http_curl($real_url,self::$header, 'GET');
    }

    /*
     * 查询玩家筹码
     * openid  [必填]String   Players unique ID.
    */
    function get_player_chips($openid) {
        $real_url = self::$url.'player_chips/'.$openid;
        return $this->http_curl($real_url,self::$header, 'GET');
    }

    /*
     * 检测玩家是否已经存在
     * username  [必填]String  Username of the Player.
    */
    function is_player_exist($username) {
        $real_url = self::$url.'player_names/'.$username;
        return $this->http_curl($real_url,self::$header, 'GET');
    }

    /*
     * 获取APP登录token二维码
     * openid  [必填]String   Players unique ID..
    */
    function get_token_qr($openid) {
        $real_url = self::$url.'app/get_token_qr/'.$openid;
        return $this->http_curl($real_url,self::$header, 'GET');
    }
    /************************************************************************************** /

    /*
     * curl 提交请求函数
     */
    function http_curl($url, $header=null, $type="GET", $body=null, $timeout='10000000', $returnHeader = 0){
        //1.创建一个curl资源
        $ch = curl_init();
        //2.设置URL和相应的选项
        curl_setopt($ch,CURLOPT_URL,$url);//设置url
        //1)设置请求头
        //设置为false,只会获得响应的正文(true的话会连响应头一并获取到)
        curl_setopt($ch, CURLOPT_HEADER,$returnHeader);
        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); // 设置超时限制防止死循环
        //设置发起连接前的等待时间，如果设置为0，则无限等待。
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
        //将curl_exec()获取的信息以文件流的形式返回，而不是直接输出。
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        //3)设置提交方式
        switch($type){
            case "GET":
                curl_setopt($ch,CURLOPT_HTTPGET,true);
                break;
            case "POST":
                curl_setopt($ch,CURLOPT_POST,true);
                break;
            case "PUT"://使用一个自定义的请求信息来代替"GET"或"HEAD"作为HTTP请求。这对于执行"DELETE" 或者其他更隐蔽的HTT
                curl_setopt($ch,CURLOPT_CUSTOMREQUEST,"PUT");
                break;
            case "DELETE":
                curl_setopt($ch,CURLOPT_CUSTOMREQUEST,"DELETE");
                break;
        }
        //2)设备请求体
        if (count($body) > 0 ) {
            if(is_array($body)){
                $formdata = http_build_query($body);
                //$formdata = json_encode($body);
            } else {
                $formdata = $body;
            }
            curl_setopt($ch, CURLOPT_POSTFIELDS, $formdata);
        }
        //设置请求头
        if(count($header) > 0 && !empty($header)){
            curl_setopt($ch,CURLOPT_HTTPHEADER,$header);
        }
        //上传文件相关设置
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_MAXREDIRS, 3);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);// 对认证证书来源的检查
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);// 从证书中检查SSL加密算

        //4)在HTTP请求中包含一个"User-Agent: "头的字符串。-----必设
        curl_setopt($ch, CURLOPT_USERAGENT, 'SSTS Browser/1.0');
        curl_setopt($ch, CURLOPT_ENCODING, 'gzip');
        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0.1)' ); // 模拟用户使用的浏览器

        //抓取URL并把它传递给浏览器
        $res = curl_exec($ch);
        // return $res;
        $http_code   = curl_getinfo($ch,CURLINFO_HTTP_CODE);
        curl_close($ch);
        $resp['res']= json_decode($res);
        $resp['http_code']= $http_code;
        return $resp;
    }
}


