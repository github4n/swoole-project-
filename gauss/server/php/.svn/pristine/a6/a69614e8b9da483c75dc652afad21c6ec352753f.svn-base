<?php
namespace Site\Task\Report;

use Lib\Config;
use Lib\Task\Context;
use Lib\Task\IHandler;

class User implements IHandler
{
    public function onTask(Context $context, Config $config)
    {
        ['time' => $time] = $context->getData();
        $adapter = $context->getAdapter();
        $daily = intval(date('Ymd', $time));
        $start_time = strtotime($daily.' 00:00:00');
        $end_time = $start_time + 86400;
        $mysqlReport = $config->data_report;
        $mysqlUser = $config->data_user;

        //检测数据是否锁定
        $dailyInfo = [];
        $sql = "select daily from daily_status where daily=:daily and frozen=1";
        foreach ($mysqlReport->query($sql,[":daily"=>$daily]) as $row){
            $dailyInfo = $row;
        }
        if(!empty($dailyInfo)){
            $adapter->plan('Report/User', ['time' => $time + 86400], time() + 600, 9);
            return;
        }
        
        $allrow = [];
        foreach ($config->deal_list as $deal) {
            $mysqlDeal = $config->__get('data_' . $deal);
            $sql = "SELECT distinct user_id,user_key,account_name,layer_id ".
                "FROM deal WHERE deal_time BETWEEN :start_time AND :end_time ";
            $param = [":start_time"=>$start_time,":end_time"=>$end_time];
            $user_list = iterator_to_array($mysqlDeal->query($sql,$param));
            if(!empty($user_list)){
                foreach ($user_list as $key=>$val){

                    $userSql = "SELECT layer_id,layer_name,major_id,major_name,minor_id,minor_name,agent_id,".
                        "agent_name,broker_1_id,broker_1_key,broker_1_name,broker_2_id,broker_2_key,broker_2_name,".
                        "broker_3_id,broker_3_key,broker_3_name,register_time".
                        " FROM user_cumulate WHERE user_id=:user_id";
                    $userParam = [":user_id"=>$val["user_id"]];
                    $userInfo = [];
                    foreach ($mysqlReport->query($userSql,$userParam) as $rows){
                        $userInfo = $rows;
                    }

                    if(!empty($userInfo)) {
                        $row = [
//                            'daily' => $daily,
                            'user_id'=>$val["user_id"],
                            'user_key'=>$val["user_key"],
                            'user_name'=>$val["account_name"],
                            'layer_id'=>$val["layer_id"],
                            'layer_name'=>$userInfo["layer_name"],
                            'major_id' => $userInfo["major_id"],
                            'major_name' => $userInfo["major_name"],
                            'minor_id' => $userInfo["minor_id"],
                            'minor_name' => $userInfo["minor_name"],
                            'agent_id' => $userInfo["agent_id"],
                            'agent_name' => $userInfo["agent_name"],
                            'broker_1_id'=>$userInfo["broker_1_id"],
                            'broker_1_key'=>$userInfo["broker_1_key"],
                            'broker_1_name'=>$userInfo["broker_1_name"],
                            'broker_2_id'=>$userInfo["broker_2_id"],
                            'broker_2_key'=>$userInfo["broker_2_key"],
                            'broker_2_name'=>$userInfo["broker_2_name"],
                            'broker_3_id'=>$userInfo["broker_3_id"],
                            'broker_3_key'=>$userInfo["broker_3_key"],
                            'broker_3_name'=>$userInfo["broker_3_name"]
                        ];

                        //注单数  投注金额  派奖单数  派奖金额 返点单数  返点金额 *有效投注单数 有效投注金额
                        $sql = "SELECT count(quantity) as quantity,sum(bet_launch) as bet,count(bet >0 or null ) as wager_count,sum(bet) as wager_amount,sum(bonus) as bonus, ".
                            "count(bonus>0 or null) as bonus_num,count(rebate) as rebate_num,sum(rebate) as rebate".
                            " FROM bet_unit_intact WHERE user_id=:user_id AND settle_time BETWEEN '$start_time' AND '$end_time' ";
                        $bet = [];
                        foreach ($mysqlDeal->query($sql,[":user_id"=>$val["user_id"]]) as $betRow){
                            $bet = $betRow;
                        }
                        $row += [
                            "bet_count"=>$bet["quantity"],
                            "bet_amount"=>!empty($bet["bet"]) ? $bet["bet"] : 0,
                            "wager_amount" => !empty($bet["wager_amount"])? $bet["wager_amount"] :0,
                            "wager_count" => !empty($bet["wager_count"])? $bet["wager_count"] :0,
                            "bonus_count"=>$bet["bonus_num"],
                            "bonus_amount"=>!empty($bet["bonus"]) ? $bet["bonus"] : 0,
                            "rebate_count"=>$bet["rebate_num"],
                            "rebate_amount"=>!empty($bet["rebate"]) ? $bet["rebate"] : 0,
                            ];

                        //返水金额 损益金额
                        $sql = "SELECT subsidy FROM daily_user_subsidy WHERE user_id=:user_id AND daily=:daily";
                        foreach ($mysqlReport->query($sql,[":user_id"=>$val["user_id"],":daily"=>$daily]) as $subsidys){
                            $subsidy = $subsidys;
                        }
                        if(!empty($subsidy)){
                            $row += ["subsidy_amount"=>!empty($subsidy['subsidy']) ? $subsidy['subsidy'] : 0];
                            $profit_amount =  $bet["bet"] - $bet["bonus"] - $bet["rebate"] -  $subsidy["subsidy"];
                        } else{
                            $row += ["subsidy_amount"=>0];
                            $profit_amount =  $bet["bet"] - $bet["bonus"] - $bet["rebate"];
                        }

                        $row += ["profit_amount"=>$profit_amount];
                        $num = 0;
                        $money = 0;
                        $max_deposit = [];
                        //计算三方入款的
                        $sql = "SELECT count(deposit_serial) as num, sum(finish_money) as money,way_key,max(finish_money) AS gate_way_money ".
                            "FROM deposit_gateway_intact WHERE user_id=:user_id AND finish_time BETWEEN '$start_time' AND '$end_time'".
                            " group by way_key";
                        $gateList = iterator_to_array($mysqlDeal->query($sql,[":user_id"=>$val["user_id"]])) ;
                        if(!empty($gateList)){
                            foreach ($gateList as $k=>$v){
                                $max_deposit[] = $v['gate_way_money'];
                                $num += $v['num'];
                                $money += $v['money'];
                                $row += ["deposit_".$val['way_key']."_count"=>$v['num'],"deposit_".$val['way_key']."_amount"=>!empty($v['money']) ? $v['money'] : 0];
                            }
                        }else{
                            $row += ["deposit_bank_count"=>0,"deposit_bank_amount"=>0,"deposit_alipay_count"=>0,"deposit_alipay_amount"=>0,"deposit_weixin_count"=>0,"deposit_weixin_amount"=>0];
                        }

                        //计算银行转账
                        $banks_sql = "SELECT count(deposit_serial) as num, sum(finish_money) as money,max(finish_money) AS bank_money".
                            " FROM deposit_bank_intact WHERE user_id=:user_id AND finish_time  BETWEEN '$start_time' AND '$end_time'";
                        $Bank = [];
                        foreach ($mysqlDeal->query($banks_sql,[":user_id"=>$val["user_id"]]) as $banks){
                            $Bank = $banks;
                        }
                        if(!empty($Bank)){
                            $max_deposit[]= $Bank['bank_money'];
                            $num += $Bank["num"];
                            $money += $Bank["money"];
                            $row += ["bank_deposit_count"=>$Bank["num"],"bank_deposit_amount"=>!empty($Bank["money"]) ? $Bank["money"] : 0,"bank_deposit_coupon"=>0];
                        } else{
                            $row += ["bank_deposit_count"=>0,"bank_deposit_amount"=>0,"bank_deposit_coupon"=>0];
                        }

                        //快捷入款
                        $simple_sql = "SELECT count(deposit_serial) as simple_num,sum(finish_money) as simple_finish,max(finish_money) as simple_money".
                            " FROM deposit_simple_intact WHERE user_id=:user_id AND finish_time BETWEEN '$start_time' AND '$end_time'";
                        $tmp = [];
                        foreach ($mysqlDeal->query($simple_sql,[':user_id' => $val['user_id']]) as $item)
                        {
                            $tmp = $item;
                        }
                        if (!empty($tmp))
                        {
                            $num += $tmp['simple_num'];
                            $money += $tmp['simple_money'];
                            $max_deposit[] = $tmp['simple_money'];
                            $row += ["simple_deposit_count"=>!empty($tmp['simple_num'])?$tmp['simple_num']:0,"simple_deposit_amount" => !empty($tmp['simple_money'])?$tmp['simple_money']:0 ];
                        }else
                        {
                            $row += ["simple_deposit_count"=>0,"simple_deposit_amount" => 0 ];
                        }

                        //计算人工入款的次数和金额
                        $staff_sql = "SELECT count(deal_serial) as num, sum(money) as money,max(money) as staff_max,sum(coupon_audit) as coupon".
                            " FROM staff_deposit_intact WHERE user_id=:user_id AND deal_time  BETWEEN'$start_time' AND '$end_time'";
                        $staffDeposit = [];
                        foreach ($mysqlDeal->query($staff_sql,[':user_id'=>$val["user_id"]]) as $staff_deposit){
                            $staffDeposit = $staff_deposit;
                        }
                        if(!empty($staffDeposit)){
                            $max_deposit[] = $staffDeposit['staff_max'];
                            $num += $staffDeposit["num"];
                            $money += $staffDeposit["money"];
                            $row += ["deposit_max" =>!empty(max($max_deposit))?max($max_deposit):0,"staff_deposit_count"=>$staffDeposit["num"],"staff_deposit_amount"=>!empty($staffDeposit["money"])?$staffDeposit["money"]:0,"coupon_amount"=>0];
                            //活动礼金金额
                        }else{
                            $row += ["deposit_max"=>0,"staff_deposit_count"=>0,"staff_deposit_amount"=>0,"coupon_amount"=>0];
                        }
                        //计算便捷入款的次数和金额

                        //计算成功入款次数和金额
                        $deposit_count = $num;
                        $deposit_amount = $money;
                        $row += ["deposit_count"=>$deposit_count,"deposit_amount"=>$deposit_amount];

                        //计算人工出款的次数及金额
                        $sql = "SELECT count(deal_serial) as num, sum(money) as money,max(money) as max_staff_withdraw_money".
                            " FROM staff_withdraw_intact WHERE user_id=:user_id AND deal_time  BETWEEN '$start_time' AND '$end_time'";
                        $staffWithdraw = [];
                        $max_withdraw = [];
                        foreach ($mysqlDeal->query($sql,[":user_id"=>$val["user_id"]]) as $staff_withdraw){
                            $staffWithdraw = $staff_withdraw;
                        }
                        if(!empty($staffWithdraw)){
                            $max_withdraw[] = $staffWithdraw['max_staff_withdraw_money'];
                            $row += ["staff_withdraw_count"=>$staffWithdraw["num"],"staff_withdraw_amount"=>!empty($staffWithdraw["money"]) ? $staffWithdraw["money"] :0];
                        }else{
                            $row += ["staff_withdraw_count"=>0,"staff_withdraw_amount"=>0];
                        }


                        //计算出款的次数和金额
                        $sql = "SELECT count(withdraw_serial) as num, sum(withdraw_money) as money,max(withdraw_money) as max_withdraw_money".
                            " FROM withdraw_intact WHERE user_id=:user_id AND finish_time  BETWEEN '$start_time' AND '$end_time'";
                        foreach ($mysqlDeal->query($sql,[":user_id"=>$val["user_id"]]) as $withdraws){
                            $withdraw = $withdraws;
                            $max_withdraw[] = $withdraws['max_withdraw_money'];
                        }

                        //计算成功出款次数和金额
                        $withdraw_count = $staffWithdraw["num"] +  $withdraw["num"];
                        $withdraw_amount = $staffWithdraw["money"] +  $withdraw["money"];
                        $row += ["withdraw_max"=>!empty(max($max_withdraw))?max($max_withdraw):0,"withdraw_count"=>$withdraw_count,"withdraw_amount"=>$withdraw_amount];


                        //判断是否是活跃用户
                        $agentSql = "SELECT layer_id FROM user_cumulate WHERE user_id=:user_id";
                        $agentParam = [":user_id"=>$userInfo["broker_1_id"]];
                        foreach ($mysqlReport->query($agentSql,$agentParam) as $agentrow){
                            $broker_agent = $agentrow["layer_id"];
                        }
                        if(!empty($broker_agent)){
                            $brokerSql = "SELECT * FROM brokerage_setting WHERE layer_id=:layer_id";
                            $brokerParam = [":layer_id"=>$broker_agent];
                            foreach ($mysqlUser->query($brokerSql,$brokerParam) as $brokerrow){
                                $brokerRow = $brokerrow;
                            }
                            if($bet["bet"]>=$brokerRow["min_bet_amount"]){
                                $row += ["is_active"=>1];//活跃用户
                            } else{
                                $row += ["is_active"=>0];
                            }
                        }else{
                            $row += ["is_active"=>1];
                        }

                        //判断是否是首充用户
                        $sql = "SELECT first_deposit_time FROM user_event WHERE user_id=:user_id AND first_deposit_time BETWEEN :start_time AND :end_time" ;
                        $first = iterator_to_array($mysqlReport->query($sql,[":user_id"=>$val["user_id"],":start_time"=>strtotime("today"),":end_time"=>strtotime("today")+86400]));
                        if(!empty($first)){
                            $row += ["is_first_deposit"=>1];
                        }else{
                            $row += ["is_first_deposit"=>0];
                        }
                        //判断是否是新注册用户
                        if(($userInfo["register_time"]>=$time) && ($userInfo["register_time"]<=$time+86400)){
                            $row += ["is_today_register"=>1];
                        } else{
                            $row += ["is_today_register"=>0];
                        }
                        $allrow[] = $row;

                    }

                }
            }

        }

        $mysqlReport->daily_user->load($allrow, ['daily'=>$daily], 'replace');



        $weekly = intval(date("oW",$time));
        $first_day = intval(date('Ymd', strtotime("-1 week Monday", $time)));
        $last_day = intval(date('Ymd', strtotime("+0 week Sunday", $time)));
        $sql = "select user_id,user_key,user_name,layer_id,layer_name,major_id,major_name,minor_id,minor_name,agent_id,agent_name,".
            "broker_1_id,broker_1_key, broker_1_name,broker_2_id ,broker_2_key ,broker_2_name,broker_3_id,broker_3_key,broker_3_name,sum(deposit_count) as deposit_count,".
            "broker_1_name,broker_2_name,broker_3_name,".
            "sum(deposit_amount) as deposit_amount,sum(deposit_bank_count) as deposit_bank_count,".
            "sum(deposit_bank_amount) as deposit_bank_amount,sum(deposit_weixin_count) as deposit_weixin_count,".
            "sum(deposit_weixin_amount)as deposit_weixin_amount,sum(deposit_alipay_count) as deposit_alipay_count,".
            "sum(deposit_alipay_amount) as deposit_alipay_amount,sum(bank_deposit_count) as bank_deposit_count,".
            "sum(bank_deposit_amount) as bank_deposit_amount,sum(staff_deposit_count) as staff_deposit_count,".
            "sum(staff_deposit_amount) as staff_deposit_amount,sum(withdraw_count) as withdraw_count,".
            "sum(withdraw_amount) as withdraw_amount,sum(staff_withdraw_count) as staff_withdraw_count,".
            "sum(staff_withdraw_amount) as staff_withdraw_amount,sum(coupon_amount) as coupon_amount,sum(bet_count) as bet_count,".
            "sum(bet_amount) as bet_amount,sum(wager_count) as wager_count,sum(wager_amount) as wager_amount,sum(bonus_count) as bonus_count,sum(bonus_amount) as bonus_amount,".
            "sum(rebate_count) as rebate_count ,sum(rebate_amount) as rebate_amount,sum(subsidy_amount) as subsidy_amount ,".
            "sum(profit_amount) as profit_amount from daily_user where  daily between '$first_day' and '$last_day' group by ".
            "user_id,user_key,layer_id,layer_name,major_id,major_name,minor_id,minor_name,agent_id,agent_name,broker_1_id,".
            "broker_1_key, broker_2_id ,broker_2_key ,broker_3_id,broker_3_key,broker_1_name,broker_2_name,broker_3_name,user_name ";

        $generator = $mysqlReport->query($sql);
        if (!empty($generator)) {
            $mysqlReport->weekly_user->import($generator, [
                'weekly' => $weekly,
                ], 'replace');
        }


        $monthly = intval(date("Ym",$time));
        $first_day = date('Ym01', $time);
        $last_day = date('Ymd', strtotime(date('Y-m-01',$time) . ' +1 month -1 day'));
        $sql = "select user_id,user_key,user_name,layer_id,layer_name,major_id,major_name,minor_id,minor_name,agent_id,agent_name,".
            "broker_1_id,broker_1_key, broker_2_id ,broker_2_key ,broker_3_id,broker_3_key,sum(deposit_count) as deposit_count,".
            "broker_1_name,broker_2_name,broker_3_name,".
            "sum(deposit_amount)  as deposit_amount,sum(deposit_bank_count) as deposit_bank_count,".
            "sum(deposit_bank_amount) as deposit_bank_amount,sum(deposit_weixin_count) as deposit_weixin_count,".
            "sum(deposit_weixin_amount)as deposit_weixin_amount,sum(deposit_alipay_count) as deposit_alipay_count,".
            "sum(deposit_alipay_amount) as deposit_alipay_amount,sum(bank_deposit_count) as bank_deposit_count,".
            "sum(bank_deposit_amount) as bank_deposit_amount,sum(staff_deposit_count) as staff_deposit_count,".
            "sum(staff_deposit_amount) as staff_deposit_amount,sum(withdraw_count) as withdraw_count,".
            "sum(withdraw_amount) as withdraw_amount,sum(staff_withdraw_count) as staff_withdraw_count,".
            "sum(staff_withdraw_amount) as staff_withdraw_amount,sum(coupon_amount) as coupon_amount,sum(bet_count) as bet_count,".
            "sum(bet_amount) as bet_amount,sum(wager_count) as wager_count,sum(wager_amount) as wager_amount,sum(bonus_count) as bonus_count,sum(bonus_amount) as bonus_amount,".
            "sum(rebate_count) as rebate_count ,sum(rebate_amount) as rebate_amount,sum(subsidy_amount) as subsidy_amount ,".
            "sum(profit_amount) as profit_amount from daily_user where  daily between '$first_day' and '$last_day' group by ".
            "user_id,user_key,layer_id,layer_name,major_id,major_name,minor_id,minor_name,agent_id,agent_name,broker_1_id,".
            "broker_1_key, broker_2_id ,broker_2_key ,broker_3_id,broker_3_key,broker_1_name,broker_2_name,broker_3_name,user_name ";

        $generator = $mysqlReport->query($sql);
        if (!empty($generator)) {
            $mysqlReport->monthly_user->import($generator, [
                'monthly' => $monthly,
            ], 'replace');
        }
        if (time() > $time + 86400) {
            $adapter->plan('Report/User', ['time' => $time + 86400], time(), 9);
        }
        if (time() < $time + 86400 + 3600) {
            $adapter->plan('Report/User', ['time' => $time], time() + 600, 9);
        }

    }
}
