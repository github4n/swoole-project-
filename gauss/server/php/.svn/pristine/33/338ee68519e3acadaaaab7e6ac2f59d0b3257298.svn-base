<?php
namespace Lib\Http;

use Lib\Cache;
use Lib\Config;
use Lib\NameBuilder;

class Daemon
{
    private $cache, $namespace;
    public function __construct(Cache $cache, string $namespace)
    {
        $this->cache = $cache;
        $this->namespace = NameBuilder::parse($namespace);
    }
    public function run(Config $config)
    {
        while ($this->nothingChange()) {
            set_time_limit(10);
            try {
                $id = $this->cache->rpop('http:request');
                if (false === $id) {
                    usleep(10000);
                    continue;
                }
                try {
                    $context = new Context($this->cache, $id);
                    $path = $context->requestPath();
                    $log = sprintf("[%s]request %d %s\n", date('Y-m-d H:i:s'), $id, $path);
                    fwrite(STDOUT, $log);
                    $className = $this->namespace->child($path)->__toString();
                    if (is_subclass_of($className, __NAMESPACE__ . '\\IHandler')) {
                        $obj = new $className();
                    } else {
                        $obj = new Handler();
                    }
                    $obj->onRequest($context, $config);
                } finally {
                    $this->cache->lpush('http:response', $id);
                    $log = sprintf("[%s]response %d\n", date('Y-m-d H:i:s'), $id);
                    fwrite(STDOUT, $log);
                }
            } catch (\Throwable $ex) {
                $log = sprintf("[%s]%s\n", date('Y-m-d H:i:s'), $ex);
                fwrite(STDERR, $log);
            }
        }

    }
    private function nothingChange(): bool
    {
        static $time = null;
        if (is_null($time)) {
            $time = time();
        }

        foreach (get_included_files() as $file) {
            if ($time < filectime($file) || $time < filemtime($file)) {
                return false;
            }
        }
        return true;
    }
}
